[tool:pytest]
# AIDEV-NOTE: Comprehensive pytest configuration for KOL platform algorithm testing

minversion = 6.0
testpaths = tests

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Additional command line options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --cov-report=term-missing
    --cov-report=xml
    --cov-report=html:htmlcov
    --cov-config=.coveragerc
    --asyncio-mode=auto

# Test markers for categorization
markers =
    # Performance and scalability markers
    performance: Performance and benchmark tests
    slow: Slow running tests (>30 seconds)
    benchmark: Benchmark tests for performance measurement
    
    # Algorithm and mathematical validation markers
    mathematical: Mathematical property validation tests
    edge_case: Edge case and boundary condition tests
    statistical: Statistical validation tests
    
    # Integration and workflow markers
    integration: Integration tests across multiple services
    workflow: End-to-end workflow tests
    graphql: GraphQL resolver integration tests
    
    # Data quality and robustness markers
    missing_data: Tests with missing or incomplete data
    error_handling: Error handling and resilience tests
    constraint: Constraint filtering and validation tests
    
    # Algorithm-specific markers
    scoring: KOL scoring algorithm tests
    optimization: Budget optimization algorithm tests
    genetic: Genetic algorithm tests
    knapsack: Knapsack optimization tests
    linear_programming: Linear programming tests
    
    # Service-specific markers
    kol_scorer: KOL scorer service tests
    budget_optimizer: Budget optimizer service tests
    constraint_solver: Constraint satisfaction solver tests
    kol_matcher: KOL matching service tests
    
    # Data and fixture markers
    requires_db: Tests requiring database connection
    requires_redis: Tests requiring Redis connection
    requires_external_api: Tests requiring external API access

# Asyncio configuration
asyncio_mode = auto

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Ignore specific third-party warnings
    ignore:.*matplotlib.*:UserWarning
    ignore:.*psutil.*:UserWarning
    ignore:.*numpy.*:UserWarning

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Minimum coverage percentage for different modules
coverage_targets =
    --cov=src/kol_api/services/scoring --cov-fail-under=85
    --cov=src/kol_api/services/enhanced_budget_optimizer --cov-fail-under=80
    --cov=src/kol_api/services/kol_matching --cov-fail-under=75

# Environment variables for testing
env =
    TESTING=true
    LOG_LEVEL=ERROR
    DATABASE_URL=sqlite:///test.db
    REDIS_URL=redis://localhost:6379
    PYTHONPATH=src

# Test data directories
test_data_paths = 
    tests/fixtures
    tests/test_data

# Parallel execution settings
numprocesses = auto
maxprocesses = 4

# Test collection configuration
collect_ignore = [
    "setup.py",
    "conftest.py",
    ".eggs",
    "build",
    "dist",
    ".git",
    ".pytest_cache",
    "__pycache__"
]

# Custom test discovery
confcutdir = .

# Test ordering
# Run fast tests first, then slow tests
order_dependencies = true

# Memory profiling (when enabled)
profile_svg = true